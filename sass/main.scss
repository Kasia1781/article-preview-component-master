@use './colors' as c;

*,
*::after,
*::before {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

html {
	font-size: 62.5%;
}

body {
	display: flex;
	justify-content: center;
	align-items: center;
	height: 100vh;
	font-family: 'Manrope', sans-serif;
	background-color: c.$Light-Grayish-Blue;
}

.hidden {
	// generalnie używanie !important to zła praktyka,
	// ale przy tego typu klasie gdzie zależy nam
	// żeby na pewno zadziałała jest ok :)
	display: none !important;
}

.card {
	position: relative;
	width: 330px;
	border-radius: 10px;
	background-color: white;

	&__img-mobile {
		background-image: url('/img/drawers.jpg');
		height: 220px;
		background-size: cover;
		border-radius: 10px 10px 0 0;
	}

	&__img-desktop {
		display: none;
	}

	&__body {
		padding: 30px;
		padding-bottom: 20px;
	}

	&__tittle-first {
		margin-bottom: 10px;

		p {
			font-size: 1.7rem;
			font-weight: 700;
			color: c.$Very-Dark-Grayish-Blue;
		}
	}

	&__tittle-second p {
		font-size: 1.3rem;
		line-height: 20px;
		color: c.$Grayish-Blue;
	}

	&__footer {
		display: flex;
		margin-top: 20px;

		img {
			// zdjęcie ma mieć taki sam rozmiar
			// i na małym i na dużym ekranie,
			// więc lepiej ustawić bezweględną wartość.
			// Względna = % = zależna od szerokości parenta
			width: 40px;
			border-radius: 50%;
		}

		&-date {
			margin-left: 10px;

			p {
				font-size: 1.3rem;
				line-height: 20px;
			}

			.name {
				font-weight: bold;
				color: c.$Very-Dark-Grayish-Blue;
			}
			.date {
				color: c.$Grayish-Blue;
			}
		}

		button {
			// lepiej dać auto zamiast konkretnej wartości
			// - wtedy automatycznie wypełni całe puste
			// miejsce
			margin-left: auto;
			padding: 1em;
			border-radius: 50%;
			border: none;
			cursor: pointer;
			background-color: c.$Light-Grayish-Blue;

			&:hover {
					background-color: c.$Desaturated-Dark-Blue;

					// zagnieżdżamy "i" tutaj
					// żeby zmieniła kolor gdy button ma hover
					// (w poprzedniej wersji trzeba było najechać
					// kursorem bezpośrednio na ikonkę)
					i {
						color: white;
					}
			}
			
			i {
				color: c.$Desaturated-Dark-Blue;
			}
		}

		&-share {
			position: absolute;
			bottom: 0;
			width: 100%;
			display: flex;
			align-items: center;
			column-gap: 15px;
			padding: 20px 30px;
			background-color: c.$Very-Dark-Grayish-Blue;
			border-radius: 0 0 10px 10px;

			.share {
				// indywidualne paddingi zamieniłam
				// na flex i column-gap wyżej
				// padding: 25px 10px 10px 30px;
				font-size: 1.3rem;
				text-transform: uppercase;
				letter-spacing: 5px;
				color: c.$Grayish-Blue;
			}

			a {
				font-size: 2em;
				color: white;
				// padding: 20px 5px 5px;
			}

			.btn2 {
				margin-left: auto;
				padding: 0.8em;
				border-radius: 50%;
				border: none;
				cursor: pointer;
				background-color: c.$Desaturated-Dark-Blue;

				i {
					color: white;
				}
			}

			&-triangle {
				display: none;
			}
		}
		&-share2 {
			display: none;
		}

		&-desktop {
			display: none;
		}
	}
}

@media (min-width: 1000px) {
	.card {
		display: flex;
		width: 740px;
		height: 280px;

		&__img-mobile {
			height: 280px;
			padding: 14em;
			background-image: url('/img/drawers.jpg');
			background-size: cover;
			border-radius: 10px 0 0 10px;
		}

		&__tittle-first {
			margin-bottom: 10px;

			p {
				font-size: 2.3rem;
				font-weight: 700;
				color: c.$Very-Dark-Grayish-Blue;
			}
		}

		&__footer {
			// używamy footera z wersji mobilnej
			// display: none;

			// znów margin auto - żeby sam wyliczył
			// ile ma miejsca
			// uwaga: ten trik działa tylko gdy
			// parent ma ustaloną wysokość (tak jak tu
			// - card ma ustawiony konkretny height)
			margin-top: auto;
		}

		&__body {
			display: flex;
			justify-content: space-between;
			flex-direction: column;
		}
	}
	.card__footer-share {
		width: 250px;
		border-radius: 10px;
		right: -75px;
		bottom: 90px;
		padding-top: 15px;
		padding-bottom: 15px;
		justify-content: center;

		.btn2 {
			display: none;
		}

		// Jak zrobić "dziubek"?
		// Tworzymy kwadrat i obracamy go o 45 stopni
		// i ustawiamy tam gdzie chcemy :)
		&-triangle {
			display: block;
			width: 20px;
			height: 20px;
			background-color: inherit;
			position: absolute;
			bottom: -10px;
			transform: rotate(45deg);
		}
	}
}
